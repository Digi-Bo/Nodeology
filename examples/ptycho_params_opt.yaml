name: ptycho_params_opt
state_defs:
- current_node_type: str
- previous_node_type: str
- human_input: str
- input: str
- output: str
- messages: List[dict]
- begin_conversation: bool
- end_conversation: bool
- conversation: List[dict]
- conversation_summary: str
- data_path: str
- params_desc: str
- params: Dict[str, Union[str,int,float,bool,ndarray]]
- quality: str
- quality_history: List[str]
- params_questions: str
- code_example: str
- code: str
- code_explanation: str
- code_id: int
- code_path: str
- driver_path: str
- execution_success: bool
- execution_error: str
- retry_count: int
- result_path: str
- code_history: List[str]
- code_explanation_history: List[str]
- execution_history: List[str]
- recommendation: str
- recommender_knowledge: str
- example_recommendations: Dict[str, str]
- image_path: str
- diagnosis: str
- diagnosis_history: List[str]
- diagnosis_questions: str
- diagnoser_knowledge: str
- example_diagnosis: Dict[str, str]
nodes:
  params_collector:
    type: prompt
    template: '# QUESTIONS: {questions} # Instructions: Ask ALL questions from pre-defined
      QUESTIONS one by one. Ask ONLY ONE question at a time following the pre-defined
      order. YOU NEED TO ASK ALL QUESTIONS! DO NOT SKIP QUESTIONS! DO NOT CHANGE ORDER
      OF QUESTIONS! DO NOT REWRITE QUESTIONS! If all questions have been asked, output
      exactly "COLLECT_COMPLETE".'
    next:
      condition: end_conversation
      then: params_formatter
      otherwise: params_collector
  params_formatter:
    type: prompt
    template: '# PARAMS DESCRIPTION: {params_desc} # SOURCE: {source} # Instructions:
      Extract parameters from SOURCE into JSON. Include ALL parameters described in
      PARAMS DESCRIPTION in the JSON. If a parameter is not mentioned in SOURCE, use
      the default values in the PARAMS DESCRIPTION. Do not make up values. Output
      MUST be JSON ONLY, do not add explanation before or after the JSON.'
    sink: params
    next: params_recommender
    source: conversation_summary
  params_recommender:
    type: prompt
    template: '# RECOMMENDER KNOWLEDGE: {recommender_knowledge} # SOURCE: {source}
      # Instructions: Check SOURCE, recommend parameters according to RECOMMENDER
      KNOWLEDGE.'
    sink: recommendation
    next: params_updater
    source: conversation_summary
  params_updater:
    type: prompt
    template: '# PARAMS DESCRIPTION: {params_desc} # CURRENT PARAMETERS: {params}
      # SOURCE: {source} # Instructions: Modify CURRENT PARAMETERS according to SOURCE.
      Output an updated JSON following PARAMS DESCRIPTION. Output MUST be JSON ONLY,
      do not add explanation before or after the JSON.'
    sink: params
    next: params_confirmer
    source: recommendation
  params_confirmer:
    type: prompt
    template: '# PARAMS DESCRIPTION: {params_desc} # CURRENT PARAMETERS: {params}
      # SOURCE: {source} # Instructions: Modify CURRENT PARAMETERS according to SOURCE.
      Output an updated JSON following PARAMS DESCRIPTION. Output MUST be JSON ONLY,
      do not add explanation before or after the JSON.'
    sink: params
    next:
      condition: end_conversation
      then: script_generator
      otherwise: params_confirmer
    source: human_input
  script_generator:
    type: prompt
    template: '# EXAMPLE CODE: {code_example} # CONTEXT: {context} # PARAMETERS: {params}
      # Instructions: Generate code following the EXAMPLE CODE, only replace and fill
      in values from PARAMETERS, keep other code and values. Do not make up values.
      Do not add new lines. Do not add new code. Output must be code only. Do not
      add explanation before or after the code.'
    sink: code
    next: script_runner
    source:
      context: params_desc
  script_runner:
    type: script_runner
    sink:
    - result_path
    - execution_success
    - retry_count
    - execution_error
    next: quality_commentator
    executable_path: executable
    capture_output_func: ${capture_output_func}
  quality_commentator:
    type: prompt
    template: '# EXAMPLE DIAGNOSIS: {example_diagnosis_string} # USER IMAGE: {image_path}
      # Instructions: Generate a diagnosis for the USER IMAGE following the EXAMPLE
      DIAGNOSIS. Description should be concise and to the point.'
    sink: diagnosis
    image_keys: image_path
    next: updates_recommender
    result2image_convert_func: ${result2image_convert_func}
  updates_recommender:
    type: prompt
    template: '# RECOMMENDER KNOWLEDGE: {recommender_knowledge} # SOURCE: {source}
      # Instructions: Check SOURCE, recommend parameters according to RECOMMENDER
      KNOWLEDGE.'
    sink: recommendation
    next: params_updater
    source: diagnosis
entry_point: params_collector
llm: gpt-4o
vlm: gpt-4o
exit_commands: [stop workflow, quit workflow, terminate workflow]
intervene_before: [params_confirmer, params_collector]
checkpointer: memory
