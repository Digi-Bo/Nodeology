name: TrajectoryWorkflow_12_04_2024_00_45_04
state_defs:
- current_node_type: str
- previous_node_type: str
- human_input: str
- input: str
- output: str
- messages: List[dict]
- initial_position: ndarray
- initial_velocity: ndarray
- mass: float
- charge: float
- E_field: ndarray
- B_field: ndarray
- validation_response: str
- positions: List[ndarray]
- velocities: List[ndarray]
- accelerations: List[ndarray]
- energies: List[float]
- calculation_warnings: List[str]
- trajectory_plot: str
- analysis_result: dict
- updated_parameters: dict
nodes:
  validate_parameters:
    type: prompt
    template: '# Current Parameters: Mass (mass): {mass} kg Charge (charge): {charge}
      C Initial Position (initial_position): {initial_position} m Initial Velocity
      (initial_velocity): {initial_velocity} m/s E-field (E_field): {E_field} N/C
      B-field (B_field): {B_field} T # Physics Constraints: 1. Mass must be positive
      and typically between 1e-31 kg (electron) and 1e-27 kg (proton) 2. Charge typically
      between -1.6e-19 C (electron) and 1.6e-19 C (proton) 3. Velocity must be non-zero
      and typically < 1e8 m/s 4. Field must be physically reasonable: - E-field typically
      < 1e8 N/C for each direction - B-field typically < 100 T for each direction
      # Instructions: Validate current parameters against the above physical constraints
      carefully to see if there are any violations. Pay special attention to the field
      magnitudes. Output a JSON object with the following structure: {{ "validation_passed":
      true/false, "adjustments_needed": [ { "parameter": "parameter_name", "reason":
      "reason for adjustment" }, ] }} If all parameters are valid, set "validation_passed"
      to true and "adjustments_needed" to an empty list. Otherwise, set "validation_passed"
      to false and list each parameter that needs adjustment with the reason why.'
    sink: validation_response
    next:
      condition: validation_response["validation_passed"]
      then: calculate_trajectory
      otherwise: adjust_parameters
  adjust_parameters:
    type: adjust_parameters
    sink:
    - mass
    - charge
    - initial_position
    - initial_velocity
    - E_field
    - B_field
    next: validate_parameters
  calculate_trajectory:
    type: calculate_trajectory
    sink:
    - positions
    - velocities
    - accelerations
    - energies
    - calculation_warnings
    next: plot_trajectory
  plot_trajectory:
    type: plot_trajectory
    sink: trajectory_plot
    next: analyze_trajectory
  analyze_trajectory:
    type: prompt
    template: 'Analyze this particle trajectory plot. Please determine: 1. The type
      of motion (linear, circular, helical, or chaotic) 2. Key physical features (radius,
      period, pitch angle if applicable) 3. Explanation of the motion 4. Anomalies
      in the motion Output in JSON format: {{ "trajectory_type": "type_name", "key_features":
      { "feature1": value, "feature2": value }, "explanation": "detailed explanation",
      "anomalies": "anomaly description" }}'
    sink: analysis_result
    image_keys: trajectory_plot
    next: update_parameters
  update_parameters:
    type: prompt
    template: 'Current parameters: Mass: {mass} kg Charge: {charge} C Initial Position:
      {initial_position} m Initial Velocity: {initial_velocity} m/s E-field: {E_field}
      N/C B-field: {B_field} T Question: Do you want to update the parameters and
      try again? If so, let me know what you''d like to change. Answer: {human_input}
      Based on the answer, decide whether to try again or stop the workflow. Output
      a JSON with parameters and a boolean to stop the workflow or not, IMPORTANT:
      Keep existing values if not mentioned in the answer, do not make up new values:
      {{ "mass": float_value, "charge": float_value, "initial_position": [x, y, z],
      "initial_velocity": [vx, vy, vz], "E_field": [Ex, Ey, Ez], "B_field": [Bx, By,
      Bz], "stop_workflow": false/true }}'
    sink: updated_parameters
    next:
      condition: not updated_parameters["stop_workflow"]
      then: validate_parameters
      otherwise: END
entry_point: validate_parameters
llm: gpt-4o
vlm: gpt-4o
exit_commands: [stop workflow, quit workflow, terminate workflow]
intervene_before: [update_parameters]
checkpointer: memory
